#! /bin/bash

#//User Input//
DATE=$(date "+%D, %r")
DIR=$(pwd) #current directory


while getopts ":hCsur" flag; do
    case ${flag} in
        h)
        echo
        "Usage: usbackup [OPTION]
        Daemon program to automatically back up important files from a directory to a USB drive.

            -h  (help)          Displays this help message.
            -C  (configure)     Opens the configuration dialog (Recommended first!).
            -s  (status)        Displays the last 10 operations carried out by the program.
            -u  (unmount)       Signals usbackup to unmount the USB safely.
            -r  (remount)       Signals to usbackup that the USB can be remounted.
        For more info please see: (github link)"
        ;;
        C)
        echo "USBackup configuration dialog:
        1) Disk ID of USB drive to save to (use 'fdisk -l' to find the disk)"
        read USBUUID
        #write to config file
        echo "2) USB Mountpoint (format: /media/your-USB-directory)"
        read USB_MOUNT
        mkdir $USBMT &>/dev/null
        #write to config file
        echo "3) Directory to copy from (format /mnt/your-drive/your-directory)"
        read USE_DIR
        #write to config file
        echo "#//THIS PORTION OF THE CONFIG FILE WAS AUTOGENERATED BY THE CONFIGURE COMMAND AT $DATE//" >> usbackup.conf
        echo "USB_ID=$USBUUID" >> usbackup.conf
        echo "USBMT=$USB_MOUNT" >> usbackup.conf
        echo "CPDIR=$USE_DIR" >> usbackup.conf
        echo "NOTE: When the config is changed, the old entry must manually be deleted at $DIR/usbackup.conf" | tee -a usbackup.conf
        ;;
        s)
        ;;
        u)
        ;;
        r)
        ;;
        :) echo "usbackup requires an argument. Try 'usbackup -h'"
        ;;
        ?) echo "Unknown paramater. Try 'usbackup -h'"
        ;;
        esac
    done

#//Config File//

#Read #USB_ID, USBMT, and CPDIR from usbackup.conf





#//initialization//
#Check for desired USB Drive
usbinit () {
    fdisk -l | grep -qo $USB_ID #change to desired disk ID.
    usbstatus="$?" #0=dev detected, 1=not detected
}
usbcheck &>/dev/null #init var, suppress error output

until [[ $usbstatus == 0 ]]; do #Must pass check to continue init
    usbinit &>/dev/null #call function, suppress error output
    sleep 10s
done

#initialize network
ninit () {
    ip address show | grep -qwo NO-CARRIER
    nstatus="$?" #0=no connection, 1=connection
}
ninit #init var

#initialize USB
usbcreate () {
mtpt=$(fdisk -l | grep --after-context=4 $USB_ID | grep -oE '/dev/.{,4}' &>/dev/null) #fetches mount from fdisk
mount $mtpt $USBMT #mount, make sure USB is labeled correctly before running
cp -a $CPDIR $USBMT #when USB is first plugged in, update with current files
}

#//Main Operation//

#Define functions
ncheck () {
until [[ $nstatus == 1 ]]; do #Do not proceed until network is obtained, already created a copy during init
    ninit
    echo "Obtaining Network"
    sleep 10s
done

if [[ $nstatus == 1 ]]; then
    functional
fi
}

rncheck () { #Running network check, does not call back, waits longer between network checks.
    while [[ $nstatus == 1 ]]; do
        ip address show | grep -qwo NO-CARRIER
        nstatus="$?"
        echo "Running Network Check"
        if [[ $nstatus == 0 ]]; then
            noconnect
            return 1
        fi
        sleep 10s
    done
}

functional () {
    rncheck &
    while [[ $nstatus == 0 ]]; do &
        return 1
    done

    while [[ $nstatus == 1 ]]; do
            sleep 1m
            echo "Time passed, writing to USB"
            #cp -a /mnt/MS/TestDir/ /media/emergency-backup
            #wait
    done
}

noconnect () {
    echo "Network down, writing to USB"
    #cp -a /mnt/MS/TestDir/ /media/emergency-backup
    ncheck
}

#Actual program start
usbcreate #mounts USB
ncheck #sets off the chain of functions




#//Current Issues//
#After noconnect() finishes, rncheck() runs but functional() does not. [should be fixed, untested as of yet]
