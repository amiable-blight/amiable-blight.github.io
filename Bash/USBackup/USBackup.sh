#! /bin/bash
dateup () {
DATE=$(date "+%D, %r")
}
DIR=$(pwd) #current directory


#//Config File//
conftest() {
    sleep 5m
    configinit
}

configinit () {
CONFIG=/$DIR/usbackup.conf
PARAMS=$(grep -o USB_ID $CONFIG && grep -o USBMT $CONFIG && grep -o CPDIR $CONFIG && grep -o TIME $CONFIG)
PCHECK="$?" #0 = found, 1 = not found

if [[ -f "$CONFIG" ]]; then
    if [[ $PCHECK == 1 ]]; then
      echo "USBackup configuration file is empty or missing components, please run 'usbackup -C'."
      conftest
      return 1
    fi
    source $CONFIG
    dateup
    echo "[$DATE] Config file loaded." >> usbackup.log
else
    echo "USBackup configuration file missing, please run 'usbackup -C'."
    configtest
fi
}


#//initialization//
#Check for desired USB Drive
usbinit () {
    fdisk -l | grep -qo $USB_ID
    usbstatus="$?" #0=dev detected, 1=not detected
}

usbcheck () {
until [[ $usbstatus == 0 ]]; do #Must pass check to continue init
    usbinit &>/dev/null #call function, suppress error output
    sleep 10s
done
}

#initialize network
ninit () {
    ip address show | grep -qwo NO-CARRIER
    nstatus="$?" #0=no connection, 1=connection
}
ninit #init var

#initialize USB
usbcreate () {
MTPT=$(fdisk -l | grep --after-context=4 $USB_ID | grep -oE '/dev/.{,4}' &>/dev/null) #fetches mount from fdisk
mount $MTPT $USBMT #mount, make sure USB is labeled correctly before running
cp -a $CPDIR $USBMT #when USB is first plugged in, update with current files
dateup
echo "[$DATE] USB mounted, wrote updated files." >> usbackup.log
}


#//Main Operation//
#Define functions
ncheck () {
until [[ $nstatus == 1 ]]; do #Do not proceed until network is obtained, already created a copy during init
    ninit
    sleep 10s
done

if [[ $nstatus == 1 ]]; then
    dateup
    echo "[$DATE] Network Found" >> usbackup.log
    functional

fi
}

functional () {
    timer=0
    while :; do
            echo "Timer is $timer"
            ninit
            if [[ $nstatus == 1 ]]; then
                sleep 1m
                ((timer++))

                if [[ $timer == $TIME ]]; then
                    ninit
                    if [[ $nstatus == 0 ]]; then noconnect && return 1; fi #worst case check
                    timer=0
                    dateup
                    echo "[$DATE] Time passed, writing to USB" >> usbackup.log
                    #cp -a $CPDIR $USBMT
                fi
            else
                echo "BROKE!"
                noconnect
                return 1
            fi
    done
}

noconnect () {
    dateup
    echo "[$DATE] Network down, writing to USB" >> usbackup.log
    #cp -a $CPDIR $USBMT
    ncheck
}


#Actual program start
start () {
configinit #checks .conf file
usbinit &>/dev/null #init var, suppress error output
usbcheck #checks USB status
#usbcreate #mounts USB
ncheck #starts loop
}

start #calls startup process


#//User Input//
while getopts ":hCsur" flag; do
    case ${flag} in
        h)
        echo
        "Usage: usbackup [OPTION]
        Daemon program to automatically back up important files from a directory to a USB drive.

            -h  (help)          Displays this help message.
            -C  (configure)     Opens the configuration dialog (Recommended first!).
            -s  (status)        Displays the last 25 operations carried out by the program.
            -u  (unmount)       Signals usbackup to unmount the USB safely.
            -r  (remount)       Signals to usbackup that the USB can be remounted.
        For more info please see: (https://github.com/amiable-blight/amiable-blight.github.io/tree/main/Bash/USBackup)"
        ;;
        C)
        echo "USBackup configuration dialog:"
        confconfig () {
        echo "1) Disk ID of USB drive to save to (use 'fdisk -l' to find the disk)"
        read USBUUID
        echo "2) USB Mountpoint (format: /media/your-USB-directory)"
            read USB_MOUNT
            mkdir $USBMT &>/dev/null
        echo "3) Directory to copy from (format: /mnt/your-drive/your-directory)"
            read USE_DIR
        echo "4) Interval for backups under normal operation (in minutes)"
            read INTERVAL
        echo "#//THIS PORTION OF THE CONFIG FILE WAS AUTOGENERATED BY THE CONFIGURE COMMAND AT $DATE//" >> usbackup.conf
        echo "USB_ID=$USBUUID" >> usbackup.conf
        echo "USBMT=$USB_MOUNT" >> usbackup.conf
        echo "CPDIR=$USE_DIR" >> usbackup.conf
        echo "TIME=$INTERVAL" >> usbackup.conf
        echo "NOTE: When the config is changed, the old entry must manually be deleted at $DIR/usbackup.conf" | tee -a usbackup.conf
        echo "NOTE: If the configuration is changed after its initial setup, either restart or run 'usbackup -u' then 'usbackup -r' to re-initialize."
        dateup
        echo "[$DATE] Config file updated." | tee -a >> usbackup.log
        }
        if [[ $PCHECK == 0 ]]; then
            echo "Configuration file is valid. Would you like to erase and start over? (y/n)"
            read YN
            if [[ $YN == y ]]; then
                echo "#//USBACKUP CONFIGURATION FILE//" > usbackup.conf
                echo "#This config file is very barebones, but more features may be added in time." >> usbackup.conf
                confconfig
            else
                echo "Configuration aborted."
                return 1
            fi
        fi
        ;;
        s)
        #show most recent 25 entries to log file
        echo "Last 25 log entries shown. Full log is located at '$DIR/usbackup.log'. Feel free to clear log from time to time."
        ;;
        u)
        dateup
        echo "[$DATE] USB manually unmounted." | tee -a usbackup.log
        umount -f $MTPT
        start #triggers a stop by calling initial functions (hopefully)
        ;;
        r)
        dateup
        echo "[$DATE] USB manually remounted" | tee -a usbackup.log
        start
        ;;
        :) echo "usbackup requires an argument. Try 'usbackup -h'"
        ;;
        ?) echo "Unknown paramater. Try 'usbackup -h'"
        ;;
        esac
    done

#//Current Issues//
#Need to get the options working.
